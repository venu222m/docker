You’ll see it running at http://localhost:3000 (inside the server).

Press Ctrl + C to stop it.

🐳 Step 4: Create Dockerfile

Inside your my-react-app folder, create a file named Dockerfile:

nano Dockerfile


Paste this:

# Step 1: Build React app
FROM node:18-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Step 2: Serve using Nginx
FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


Save (Ctrl+O, Enter, Ctrl+X).

🏗️ Step 5: Build Docker image

From inside the React app directory:

docker build -t react-app .

▶️ Step 6: Run the container

Run it on port 3000:

docker run -d -p 3000:80 --name react-container react-app


Check if it’s running:

docker ps


You’ll see something like:

CONTAINER ID   IMAGE        COMMAND                  PORTS                  NAMES
abcd1234       react-app    "nginx -g 'daemon off;'" 0.0.0.0:3000->80/tcp   react-container

🌍 Step 7: Access it from outside

Find your public IP:

curl ifconfig.me


Then open in your browser:

http://<your-server-ip>:3000


✅ You should see your React app running via Docker!

🧹 Optional: Manage containers
docker stop react-container      # Stop container
docker start react-container     # Start container again
docker logs -f react-container   # View logs
docker rm -f react-container  
=================================================================================================================================================
🧩 Step 1: Confirm Docker is installed

If you followed the React setup, skip this. Otherwise:

docker --version


If Docker isn’t installed, run:

sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
sudo systemctl enable docker
sudo systemctl start docker
sudo usermod -aG docker $USER
newgrp docker

📁 Step 2: Create Node.js backend project

Create a folder for your app:

mkdir node-backend
cd node-backend


Initialize Node.js:

npm init -y


Install Express:

npm install express

📝 Step 3: Create your backend code

Create a file named server.js:

nano server.js


Paste this:

const express = require("express");
const app = express();
const PORT = 5000;

app.get("/", (req, res) => {
  res.send("🚀 Node.js server running successfully inside Docker!");
});

app.listen(PORT, "0.0.0.0", () => {
  console.log(`Server running on http://0.0.0.0:${PORT}`);
});


Save (Ctrl + O, Enter, Ctrl + X).

🐳 Step 4: Create Dockerfile

In the same node-backend folder:

nano Dockerfile


Paste this:

# Use Node.js base image
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm install --production

# Copy the rest of the code
COPY . .

# Expose backend port
EXPOSE 5000

# Start the app
CMD ["node", "server.js"]


Save and exit.

🏗️ Step 5: Build Docker image

From inside node-backend:

docker build -t node-backend .

▶️ Step 6: Run the container

Run and expose port 5000:

docker run -d -p 5000:5000 --name node-container node-backend


Check if it’s running:

docker ps


You should see something like:

CONTAINER ID   IMAGE           PORTS                    NAMES
abcd1234       node-backend    0.0.0.0:5000->5000/tcp   node-container

🌍 Step 7: Test from outside

Find your server’s public IP:

curl ifconfig.me


Then open in your browser:

http://<your-server-ip>:5000


✅ You’ll see:

🚀 Node.js server running successfully inside Docker!

🧹 Step 8: Manage container
docker stop node-container      # Stop container
docker start node-container     # Restart container
docker logs -f node-container   # View logs live
docker rm -f node-container     # Remove container
